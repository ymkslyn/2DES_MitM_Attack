from itertools import product

def hex_to_bin(h)
    map = {
        '0' 0000,
        '1' 0001,
        '2' 0010,
        '3' 0011,
        '4' 0100,
        '5' 0101,
        '6' 0110,
        '7' 0111,
        '8' 1000,
        '9' 1001,
        'A' 1010,
        'B' 1011,
        'C' 1100,
        'D' 1101,
        'E' 1110,
        'F' 1111
    }
    binary = 
    for i in range(len(h))
        binary = binary+map[h[i]]
    return binary

def bin_to_hex(b)
    map = {
        0000 '0',
          0001 '1',
          0010 '2',
          0011 '3',
          0100 '4',
          0101 '5',
          0110 '6',
          0111 '7',
          1000 '8',
          1001 '9',
          1010 'A',
          1011 'B',
          1100 'C',
          1101 'D',
          1110 'E',
          1111 'F'    
    }
    hex = 
    for i in range(0, len(b),4)
        hex += map[b[ii+4]]
    return hex

    

def initial_perm(block)
    initial_table = [
        58, 50, 42, 34, 26, 18, 10, 2,
        60, 52, 44, 36, 28, 20, 12, 4,
        62, 54, 46, 38, 30, 22, 14, 6,
        64, 56, 48, 40, 32, 24, 16, 8,
        57, 49, 41, 33, 25, 17, 9, 1,
        59, 51, 43, 35, 27, 19, 11, 3,
        61, 53, 45, 37, 29, 21, 13, 5,
        63, 55, 47, 39, 31, 23, 15, 7
    ]         
    result = 
    for i in range(len(initial_table))
        index = initial_table[i]-1
        result += block[index]
    return result

def final_perm(block)
    final_table = [
        40, 8, 48, 16, 56, 24, 64, 32,
        39, 7, 47, 15, 55, 23, 63, 31,
        38, 6, 46, 14, 54, 22, 62, 30,
        37, 5, 45, 13, 53, 21, 61, 29,
        36, 4, 44, 12, 52, 20, 60, 28,
        35, 3, 43, 11, 51, 19, 59, 27,
        34, 2, 42, 10, 50, 18, 58, 26,
        33, 1, 41, 9, 49, 17, 57, 25
    ]
    permuted = 
    for i in range(len(final_table))
        index = final_table[i] - 1
        permuted += block[index]
    return permuted

def expansion_p_box(block)
    expansion_tb = [
        32, 1, 2, 3, 4, 5,
        4, 5, 6, 7, 8, 9,
        8, 9, 10, 11, 12, 13,
        12, 13, 14, 15, 16, 17,
        16, 17, 18, 19, 20, 21,
        20, 21, 22, 23, 24, 25,
        24, 25, 26, 27, 28, 29,
        28, 29, 30, 31, 32, 1
    ]
    expanded_tb = 
    for position in expansion_tb
        expanded_tb += block[position - 1]
    return expanded_tb

def straight_p_box(block)
    straight_tb = [
        16,  7, 20, 21,
       29, 12, 28, 17,
       1, 15, 23, 26,
       5, 18, 31, 10,
       2,  8, 24, 14,
       32, 27,  3,  9,
       19, 13, 30,  6,
       22, 11,  4, 25
    ]
    straightened_tb = 
    for position in straight_tb
        straightened_tb += block[position-1]
    return straightened_tb

def s_boxes(input)
    s_boxes_tb = [
        [
            [14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7],
            [0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8],
            [4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0],
            [15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13]
        ],
    
        [
            [15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10],
            [3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5],
            [0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15],
            [13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9]
        ],
    
        [
            [10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8],
            [13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1],
            [13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7],
            [1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12]
        ],
    
        [
            [7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15],
            [13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9],
            [10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4],
            [3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14]
        ],
    
        [
            [2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9],
            [14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6],
            [4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14],
            [11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3]
        ],
    
        [
            [12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11],
            [10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8],
            [9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6],
            [4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13]
        ],
    
        [
            [4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1],
            [13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6],
            [1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2],
            [6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12]
        ],
    
        [
            [13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7],
            [1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2],
            [7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8],
            [2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11]
        ]
    ]

    output = 
    for i in range(8)
        block = input[i  6(i + 1)  6]
        row = int(block[0] + block[5], 2)
        col = int(block[15], 2)
        value = s_boxes_tb[i][row][col]
        output += format(value, 04b)
    return output
       

def split(s, size)
    if size == 64
        left = s[032]
        right = s[3264]
    elif size == 56
        left = s[028]
        right = s[2856]
    else
        print(Invalid text size or key size)
    return left, right

def swap(left, right)
    return right + left


def xor(p, k)
    result = 
    for i in range(len(p))
        if p[i] == k[i]
            result += 0
        else
            result += 1
    return result


def permute(block, table)
    result = 
    for position in table
        result += block[position - 1]
    return result

def shift_left(key, shifts)
    return key[shifts] + key[shifts]

def key_generation(initial_key)
    pc1 = [
        57, 49, 41, 33, 25, 17, 9,
        1, 58, 50, 42, 34, 26, 18,
        10, 2, 59, 51, 43, 35, 27,
        19, 11, 3, 60, 52, 44, 36,
        63, 55, 47, 39, 31, 23, 15,
        7, 62, 54, 46, 38, 30, 22,
        14, 6, 61, 53, 45, 37, 29,
        21, 13, 5, 28, 20, 12, 4
    ]

    pc2 = [
        14, 17, 11, 24, 1, 5,
        3, 28, 15, 6, 21, 10,
        23, 19, 12, 4, 26, 8,
        16, 7, 27, 20, 13, 2,
        41, 52, 31, 37, 47, 55,
        30, 40, 51, 45, 33, 48,
        44, 49, 39, 56, 34, 53,
        46, 42, 50, 36, 29, 32
    ]

    shift_schedule = [1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1]

    permuted_key = permute(initial_key, pc1)

    left, right = split(permuted_key, 56)

    subkeys = []
    for shifts in shift_schedule
        left = shift_left(left, shifts)
        right = shift_left(right, shifts)
        combined_key = left + right
        subkey = permute(combined_key, pc2)
        subkeys.append(subkey)

    return subkeys

def des_encrypt(plaintext, key)

    binary_plaintext = hex_to_bin(plaintext)
    binary_key = hex_to_bin(key)

    subkeys = key_generation(binary_key)


    permuted_block = initial_perm(binary_plaintext)

 
    left, right = split(permuted_block, 64)


    for i in range(16)
        expanded_right = expansion_p_box(right)
        xor_result = xor(expanded_right, subkeys[i])
        sbox_result = s_boxes(xor_result)
        pbox_result = straight_p_box(sbox_result)
        new_right = xor(left, pbox_result)
        left = right
        right = new_right

    combined_block = swap(left, right)
    encrypted_binary = final_perm(combined_block)

 
    encrypted_hex = bin_to_hex(encrypted_binary)
    return encrypted_hex

def des_decrypt(ciphertext, key)

    binary_ciphertext = hex_to_bin(ciphertext)
    binary_key = hex_to_bin(key)


    subkeys = key_generation(binary_key)


    permuted_block = initial_perm(binary_ciphertext)

    left, right = split(permuted_block, 64)

    for i in range(15, -1, -1)
        expanded_right = expansion_p_box(right)
        xor_result = xor(expanded_right, subkeys[i])
        sbox_result = s_boxes(xor_result)
        pbox_result = straight_p_box(sbox_result)
        new_right = xor(left, pbox_result)
        left = right
        right = new_right

    combined_block = swap(left, right)
    decrypted_binary = final_perm(combined_block)

    decrypted_hex = bin_to_hex(decrypted_binary)
    return decrypted_hex

def meet_in_the_middle(plaintext, ciphertext, key1_pattern, key2_pattern)
    possible_values = [.join(chars) for chars in product(0123456789ABCDEF, repeat=2)]

    encryption_dict = {}
    decryption_dict = {}

    print(Starting Meet-in-the-Middle attack...)

    for value1 in possible_values
        key1 = key1_pattern.replace(, value1)

        intermediate = des_encrypt(plaintext, key1)

        encryption_dict[intermediate] = key1

    for value2 in possible_values
        key2 = key2_pattern.replace(, value2)

        intermediate = des_decrypt(ciphertext, key2)


        decryption_dict[intermediate] = key2

    for intermediate in encryption_dict
        if intermediate in decryption_dict
            return encryption_dict[intermediate], decryption_dict[intermediate]
        
    return None, None


def main()

    plaintext = input(Enter the plaintext (in hex) ).strip().upper()
    ciphertext = input(Enter the ciphertext (in hex) ).strip().upper()
    key1_pattern = input(Enter the Key 1 pattern (use  for unknown values) ).strip().upper()
    key2_pattern = input(Enter the Key 2 pattern (use  for unknown values) ).strip().upper()

    key1, key2 = meet_in_the_middle(plaintext, ciphertext, key1_pattern, key2_pattern)

    if key1 and key2
        print(Attack Done!)
        print(fRecovered Key 1 {key1})
        print(fRecovered Key 2 {key2})
    else
        print(Attack Failed. No matching keys found.)

if __name__ == __main__
    main()
